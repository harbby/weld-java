apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'maven'

version = '0.1.0'
group = "weld"

repositories {
    jcenter()
}

dependencies {
    api 'org.scijava:native-lib-loader:2.1.5'
    testImplementation 'junit:junit:4.12'
}

/**
 * Configure the build script dependencies so we can use the NativeLibraryUtil to determine the
 * location of the locally built native library.
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath group: 'org.scijava', name: 'native-lib-loader', version: '2.1.5'
    }
}

/**
 * Generate the JNI headers for java integration.
 */
task generateJniHeaders(type:Exec) {
    def classpath = sourceSets.main.java.outputDir
    def nativeIncludes = "src/native/include"
    commandLine "javah", "-d", nativeIncludes, "-classpath", classpath, "weld.WeldJNI"
    dependsOn classes
}

/**
 * Compile the weld-java native library.
 *
 * In the future we might want to get cross compilation working. See:
 * https://chr4.org/blog/2017/03/15/cross-compile-and-link-a-static-binary-on-macos-for-linux-with-cargo-and-rust/
 * https://github.com/japaric/cross
 *
 * FIXME weld_rt relies on the WELD_HOME var to be set. You currently need weld checked out, and
 * WELD_HOME set for weld to work. The problem is made worse by the fact that the compilation
 * succeeds(!!!) and weld only fails at runtime with the following message:
 * LLVM ERROR: Program used external function '_get_runid' which could not be resolved!
 */
task compileWeld(type:Exec) {
    //commandLine "cargo", "build", "--release"
    workingDir = "src/native/include"
    commandLine "make"
}

compileJava {
    // Shut-up the compiler about sun.misc.*
    options.fork = true
    options.forkOptions.executable = 'javac'
    options.compilerArgs << "-XDignore.symbol.file"
}

test {
    dependsOn cleanTest
    testLogging.showStandardStreams = true
    systemProperty 'java.library.path', 'src/native/include/'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
    // Make sure we copy the compiled native libary to the correct location in the jar file.
    def platform = org.scijava.nativelib.NativeLibraryUtil.getArchitecture().name().toLowerCase()
    def libname = System.mapLibraryName('weld_java')
    into('META-INF/lib/' + platform) {
        from {
            'src/native/include/' + libname
        }
    }
    dependsOn compileWeld
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}
